{"ast":null,"code":"import { io } from \"socket.io-client\";\nexport let socket;\nexport function initSocketConnection(state, participants, setParticipants) {\n  socket = io(\"http://localhost:5000\", {\n    autoConnect: false\n  });\n  socket.auth = {\n    nickname: state.nickname,\n    roomID: state.roomID\n  };\n  socket.connect();\n\n  //New user joined the room. Add to participants.\n  socket.on(\"newUser\", currentParticipants => {\n    setParticipants([...currentParticipants]);\n    console.log(\"CURRENT PARTICIPANTS\", participants);\n  });\n\n  //User left. Remove from participants\n  socket.on(\"userDisconnect\", currentParticipants => {\n    setParticipants(currentParticipants);\n    console.log(\"CURRENT PARTICIPANTS\", participants);\n  });\n  return socket;\n}\n\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\nexport function disconnectSocket(socket) {\n  socket.off(\"connect\");\n  socket.off(\"disconnect\");\n  socket.off(\"pong\");\n  socket.disconnect();\n}","map":{"version":3,"names":["io","socket","initSocketConnection","state","participants","setParticipants","autoConnect","auth","nickname","roomID","connect","on","currentParticipants","console","log","disconnectSocket","off","disconnect"],"sources":["C:/Users/antho/Documents/Programming/WebDev/Movie Voter/movie-voter/src/services/Socket.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport let socket;\r\n\r\nexport function initSocketConnection(state, participants, setParticipants) {\r\n  socket = io(\"http://localhost:5000\", { autoConnect: false });\r\n\r\n  socket.auth = { nickname: state.nickname, roomID: state.roomID };\r\n  socket.connect();\r\n\r\n  //New user joined the room. Add to participants.\r\n  socket.on(\"newUser\", (currentParticipants) => {\r\n   setParticipants([...currentParticipants]);\r\n    console.log(\"CURRENT PARTICIPANTS\", participants);\r\n  });\r\n\r\n  //User left. Remove from participants\r\n  socket.on(\"userDisconnect\", (currentParticipants) => {\r\n    setParticipants(currentParticipants);\r\n    console.log(\"CURRENT PARTICIPANTS\", participants);\r\n  });\r\n  return socket;\r\n}\r\n\r\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\r\nexport function disconnectSocket(socket) {\r\n  socket.off(\"connect\");\r\n  socket.off(\"disconnect\");\r\n  socket.off(\"pong\");\r\n  socket.disconnect();\r\n}\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,OAAO,IAAIC,MAAM;AAEjB,OAAO,SAASC,oBAAoB,CAACC,KAAK,EAAEC,YAAY,EAAEC,eAAe,EAAE;EACzEJ,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;IAAEM,WAAW,EAAE;EAAM,CAAC,CAAC;EAE5DL,MAAM,CAACM,IAAI,GAAG;IAAEC,QAAQ,EAAEL,KAAK,CAACK,QAAQ;IAAEC,MAAM,EAAEN,KAAK,CAACM;EAAO,CAAC;EAChER,MAAM,CAACS,OAAO,EAAE;;EAEhB;EACAT,MAAM,CAACU,EAAE,CAAC,SAAS,EAAGC,mBAAmB,IAAK;IAC7CP,eAAe,CAAC,CAAC,GAAGO,mBAAmB,CAAC,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEV,YAAY,CAAC;EACnD,CAAC,CAAC;;EAEF;EACAH,MAAM,CAACU,EAAE,CAAC,gBAAgB,EAAGC,mBAAmB,IAAK;IACnDP,eAAe,CAACO,mBAAmB,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEV,YAAY,CAAC;EACnD,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;;AAEA;AACA,OAAO,SAASc,gBAAgB,CAACd,MAAM,EAAE;EACvCA,MAAM,CAACe,GAAG,CAAC,SAAS,CAAC;EACrBf,MAAM,CAACe,GAAG,CAAC,YAAY,CAAC;EACxBf,MAAM,CAACe,GAAG,CAAC,MAAM,CAAC;EAClBf,MAAM,CAACgB,UAAU,EAAE;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}