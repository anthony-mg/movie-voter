{"ast":null,"code":"import { io } from \"socket.io-client\";\nexport let socket;\nexport function initSocketConnection(state, participants, setParticipants) {\n  socket = io(\"http://localhost:5000\", {\n    autoConnect: false,\n    auth: {\n      nickname: state.nickname,\n      roomID: state.roomID\n    }\n  });\n  console.log(socket.auth);\n  socket.connect();\n\n  //Fired by server when a socket joins a room. Send client list of current participants in the room\n  socket.on(\"joinedRoom\", parts => {\n    setParticipants(parts.map(participantObject => participantObject.nickname));\n    console.log(\"Participants at event joinedRoom:\", parts.map(participantObject => participantObject.nickname));\n  });\n\n  //New user joined the room. Add to participants.\n  socket.on(\"newUser\", nickname => {\n    console.log(nickname, \"has joined the room.\");\n    setParticipants([...participants, nickname]);\n  });\n\n  //User left. Remove from participants\n  socket.on(\"userDisconnect\", nickname => {\n    console.log(nickname, \"left.\");\n    setParticipants(participants.filter(name => name !== nickname));\n    console.log(participants);\n  });\n  return socket;\n}\n\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\nexport function disconnectSocket() {\n  socket.off(\"connect\");\n  socket.off(\"joinedRoom\");\n  socket.off(\"newUser\");\n  socket.disconnect();\n}","map":{"version":3,"names":["io","socket","initSocketConnection","state","participants","setParticipants","autoConnect","auth","nickname","roomID","console","log","connect","on","parts","map","participantObject","filter","name","disconnectSocket","off","disconnect"],"sources":["C:/Users/antho/Documents/Programming/WebDev/Movie Voter/movie-voter/src/services/Socket.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport let socket;\r\n\r\nexport function initSocketConnection(state, participants, setParticipants) {\r\n  socket = io(\"http://localhost:5000\", {\r\n    autoConnect: false,\r\n    auth: {\r\n      nickname: state.nickname,\r\n      roomID: state.roomID,\r\n    },\r\n  });\r\n\r\n  console.log(socket.auth);\r\n  socket.connect();\r\n\r\n  //Fired by server when a socket joins a room. Send client list of current participants in the room\r\n  socket.on(\"joinedRoom\", (parts) => {\r\n    setParticipants(parts.map((participantObject) => participantObject.nickname));\r\n    console.log(\r\n      \"Participants at event joinedRoom:\",\r\n      parts.map((participantObject) => participantObject.nickname)\r\n    );\r\n  });\r\n\r\n  //New user joined the room. Add to participants.\r\n  socket.on(\"newUser\", (nickname) => {\r\n    console.log(nickname, \"has joined the room.\");\r\n    setParticipants([...participants, nickname]);\r\n  });\r\n\r\n  //User left. Remove from participants\r\n  socket.on(\"userDisconnect\", (nickname) => {\r\n    console.log(nickname, \"left.\");\r\n    setParticipants(participants.filter((name) => name !== nickname));\r\n    console.log(participants);\r\n  });\r\n  return socket;\r\n}\r\n\r\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\r\nexport function disconnectSocket() {\r\n  socket.off(\"connect\");\r\n  socket.off(\"joinedRoom\");\r\n  socket.off(\"newUser\");\r\n  socket.disconnect();\r\n}\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,OAAO,IAAIC,MAAM;AAEjB,OAAO,SAASC,oBAAoB,CAACC,KAAK,EAAEC,YAAY,EAAEC,eAAe,EAAE;EACzEJ,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;IACnCM,WAAW,EAAE,KAAK;IAClBC,IAAI,EAAE;MACJC,QAAQ,EAAEL,KAAK,CAACK,QAAQ;MACxBC,MAAM,EAAEN,KAAK,CAACM;IAChB;EACF,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAACV,MAAM,CAACM,IAAI,CAAC;EACxBN,MAAM,CAACW,OAAO,EAAE;;EAEhB;EACAX,MAAM,CAACY,EAAE,CAAC,YAAY,EAAGC,KAAK,IAAK;IACjCT,eAAe,CAACS,KAAK,CAACC,GAAG,CAAEC,iBAAiB,IAAKA,iBAAiB,CAACR,QAAQ,CAAC,CAAC;IAC7EE,OAAO,CAACC,GAAG,CACT,mCAAmC,EACnCG,KAAK,CAACC,GAAG,CAAEC,iBAAiB,IAAKA,iBAAiB,CAACR,QAAQ,CAAC,CAC7D;EACH,CAAC,CAAC;;EAEF;EACAP,MAAM,CAACY,EAAE,CAAC,SAAS,EAAGL,QAAQ,IAAK;IACjCE,OAAO,CAACC,GAAG,CAACH,QAAQ,EAAE,sBAAsB,CAAC;IAC7CH,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEI,QAAQ,CAAC,CAAC;EAC9C,CAAC,CAAC;;EAEF;EACAP,MAAM,CAACY,EAAE,CAAC,gBAAgB,EAAGL,QAAQ,IAAK;IACxCE,OAAO,CAACC,GAAG,CAACH,QAAQ,EAAE,OAAO,CAAC;IAC9BH,eAAe,CAACD,YAAY,CAACa,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKV,QAAQ,CAAC,CAAC;IACjEE,OAAO,CAACC,GAAG,CAACP,YAAY,CAAC;EAC3B,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;;AAEA;AACA,OAAO,SAASkB,gBAAgB,GAAG;EACjClB,MAAM,CAACmB,GAAG,CAAC,SAAS,CAAC;EACrBnB,MAAM,CAACmB,GAAG,CAAC,YAAY,CAAC;EACxBnB,MAAM,CAACmB,GAAG,CAAC,SAAS,CAAC;EACrBnB,MAAM,CAACoB,UAAU,EAAE;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}