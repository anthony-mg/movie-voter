{"ast":null,"code":"import { io } from \"socket.io-client\";\nexport let socket;\nexport function initSocketConnection(state, participants) {\n  socket = io(\"http://localhost:5000\");\n\n  //Join room on connect\n  socket.on(\"connect\", () => {\n    socket.emit(\"join\", state.roomID, state.nickname);\n  });\n\n  //New user joined the room. Add to participants.\n  socket.on(\"newUser\", nickname => {\n    console.log(nickname, \"has joined the room.\");\n    participants.current = [...participants.current, nickname];\n    console.log(participants.current);\n  });\n\n  //User left. Remove from participants\n  socket.on(\"userDisconnect\", nickname => {\n    console.log(nickname, \"left.\");\n    participants.current = participants.current.splice(participants.current.findIndex(name => name === nickname), 1);\n    console.log(participants.current);\n  });\n}\n\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\nexport function disconnectSocket() {\n  socket.off(\"connect\");\n  socket.off(\"disconnect\");\n  socket.off(\"pong\");\n  socket.disconnect();\n}","map":{"version":3,"names":["io","socket","initSocketConnection","state","participants","on","emit","roomID","nickname","console","log","current","splice","findIndex","name","disconnectSocket","off","disconnect"],"sources":["C:/Users/antho/Documents/Programming/WebDev/Movie Voter/movie-voter/src/services/Socket.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport let socket;\r\n\r\nexport function initSocketConnection(state, participants) {\r\n  socket = io(\"http://localhost:5000\");\r\n  \r\n  //Join room on connect\r\n  socket.on(\"connect\", () => {\r\n    socket.emit(\"join\", state.roomID, state.nickname);\r\n  });\r\n\r\n\r\n  //New user joined the room. Add to participants.\r\n  socket.on(\"newUser\", (nickname) => {\r\n    console.log(nickname, \"has joined the room.\");\r\n    participants.current = [...participants.current, nickname];\r\n    console.log(participants.current);\r\n  });\r\n\r\n  //User left. Remove from participants\r\n  socket.on(\"userDisconnect\", (nickname) => {\r\n    console.log(nickname, \"left.\");\r\n    participants.current = participants.current.splice(\r\n      participants.current.findIndex((name) => name === nickname),\r\n      1\r\n    );\r\n    console.log(participants.current);\r\n  });\r\n}\r\n\r\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\r\nexport function disconnectSocket() {\r\n  socket.off(\"connect\");\r\n  socket.off(\"disconnect\");\r\n  socket.off(\"pong\");\r\n  socket.disconnect();\r\n}\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,OAAO,IAAIC,MAAM;AAEjB,OAAO,SAASC,oBAAoB,CAACC,KAAK,EAAEC,YAAY,EAAE;EACxDH,MAAM,GAAGD,EAAE,CAAC,uBAAuB,CAAC;;EAEpC;EACAC,MAAM,CAACI,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBJ,MAAM,CAACK,IAAI,CAAC,MAAM,EAAEH,KAAK,CAACI,MAAM,EAAEJ,KAAK,CAACK,QAAQ,CAAC;EACnD,CAAC,CAAC;;EAGF;EACAP,MAAM,CAACI,EAAE,CAAC,SAAS,EAAGG,QAAQ,IAAK;IACjCC,OAAO,CAACC,GAAG,CAACF,QAAQ,EAAE,sBAAsB,CAAC;IAC7CJ,YAAY,CAACO,OAAO,GAAG,CAAC,GAAGP,YAAY,CAACO,OAAO,EAAEH,QAAQ,CAAC;IAC1DC,OAAO,CAACC,GAAG,CAACN,YAAY,CAACO,OAAO,CAAC;EACnC,CAAC,CAAC;;EAEF;EACAV,MAAM,CAACI,EAAE,CAAC,gBAAgB,EAAGG,QAAQ,IAAK;IACxCC,OAAO,CAACC,GAAG,CAACF,QAAQ,EAAE,OAAO,CAAC;IAC9BJ,YAAY,CAACO,OAAO,GAAGP,YAAY,CAACO,OAAO,CAACC,MAAM,CAChDR,YAAY,CAACO,OAAO,CAACE,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAKN,QAAQ,CAAC,EAC3D,CAAC,CACF;IACDC,OAAO,CAACC,GAAG,CAACN,YAAY,CAACO,OAAO,CAAC;EACnC,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASI,gBAAgB,GAAG;EACjCd,MAAM,CAACe,GAAG,CAAC,SAAS,CAAC;EACrBf,MAAM,CAACe,GAAG,CAAC,YAAY,CAAC;EACxBf,MAAM,CAACe,GAAG,CAAC,MAAM,CAAC;EAClBf,MAAM,CAACgB,UAAU,EAAE;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}