{"ast":null,"code":"import { io } from \"socket.io-client\";\nexport let socket;\nexport function initSocketConnection(state, participants) {\n  socket = io(\"http://localhost:5000\", {\n    autoConnect: false\n  });\n  const sessionID = localStorage.getItem(\"sessionID\");\n  socket.auth = {\n    sessionnickname: state.nickname\n  };\n  socket.connect();\n\n  //Join room on connect\n  socket.on(\"connect\", () => {\n    socket.emit(\"join\", state.roomID, state.nickname);\n  });\n\n  //Emitted by server on connection\n  socket.on(\"session\", _ref => {\n    let {\n      sessionID,\n      room\n    } = _ref;\n    socket.auth = {\n      sessionID\n    };\n    localStorage.setItem(\"sessionID\", sessionID);\n    console.log(\"in session\");\n  });\n\n  //New user joined the room. Add to participants.\n  socket.on(\"newUser\", nickname => {\n    console.log(nickname, \"has joined the room.\");\n    participants.current = [...participants.current, nickname];\n    console.log(participants.current);\n  });\n\n  //User left. Remove from participants\n  socket.on(\"userDisconnect\", nickname => {\n    console.log(nickname, \"left.\");\n    participants.current = participants.current.splice(participants.current.findIndex(name => name === nickname), 1);\n    console.log(participants.current);\n  });\n}\n\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\nexport function disconnectSocket() {\n  socket.off(\"connect\");\n  socket.off(\"disconnect\");\n  socket.off(\"pong\");\n  socket.disconnect();\n}","map":{"version":3,"names":["io","socket","initSocketConnection","state","participants","autoConnect","sessionID","localStorage","getItem","auth","sessionnickname","nickname","connect","on","emit","roomID","room","setItem","console","log","current","splice","findIndex","name","disconnectSocket","off","disconnect"],"sources":["C:/Users/antho/Documents/Programming/WebDev/Movie Voter/movie-voter/src/services/Socket.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport let socket;\r\n\r\nexport function initSocketConnection(state, participants) {\r\n  socket = io(\"http://localhost:5000\", { autoConnect: false });\r\n  const sessionID = localStorage.getItem(\"sessionID\")\r\n  socket.auth = { sessionnickname: state.nickname };\r\n  socket.connect();\r\n\r\n  //Join room on connect\r\n  socket.on(\"connect\", () => {\r\n    socket.emit(\"join\", state.roomID, state.nickname);\r\n  });\r\n\r\n  //Emitted by server on connection\r\n  socket.on(\"session\", ({ sessionID, room}) => {\r\n    socket.auth = { sessionID };\r\n    localStorage.setItem(\"sessionID\", sessionID);\r\n    console.log(\"in session\");\r\n  });\r\n\r\n  //New user joined the room. Add to participants.\r\n  socket.on(\"newUser\", (nickname) => {\r\n    console.log(nickname, \"has joined the room.\");\r\n    participants.current = [...participants.current, nickname];\r\n    console.log(participants.current);\r\n  });\r\n\r\n  //User left. Remove from participants\r\n  socket.on(\"userDisconnect\", (nickname) => {\r\n    console.log(nickname, \"left.\");\r\n    participants.current = participants.current.splice(\r\n      participants.current.findIndex((name) => name === nickname),\r\n      1\r\n    );\r\n    console.log(participants.current);\r\n  });\r\n}\r\n\r\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\r\nexport function disconnectSocket() {\r\n  socket.off(\"connect\");\r\n  socket.off(\"disconnect\");\r\n  socket.off(\"pong\");\r\n  socket.disconnect();\r\n}\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,OAAO,IAAIC,MAAM;AAEjB,OAAO,SAASC,oBAAoB,CAACC,KAAK,EAAEC,YAAY,EAAE;EACxDH,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;IAAEK,WAAW,EAAE;EAAM,CAAC,CAAC;EAC5D,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnDP,MAAM,CAACQ,IAAI,GAAG;IAAEC,eAAe,EAAEP,KAAK,CAACQ;EAAS,CAAC;EACjDV,MAAM,CAACW,OAAO,EAAE;;EAEhB;EACAX,MAAM,CAACY,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBZ,MAAM,CAACa,IAAI,CAAC,MAAM,EAAEX,KAAK,CAACY,MAAM,EAAEZ,KAAK,CAACQ,QAAQ,CAAC;EACnD,CAAC,CAAC;;EAEF;EACAV,MAAM,CAACY,EAAE,CAAC,SAAS,EAAE,QAAwB;IAAA,IAAvB;MAAEP,SAAS;MAAEU;IAAI,CAAC;IACtCf,MAAM,CAACQ,IAAI,GAAG;MAAEH;IAAU,CAAC;IAC3BC,YAAY,CAACU,OAAO,CAAC,WAAW,EAAEX,SAAS,CAAC;IAC5CY,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC3B,CAAC,CAAC;;EAEF;EACAlB,MAAM,CAACY,EAAE,CAAC,SAAS,EAAGF,QAAQ,IAAK;IACjCO,OAAO,CAACC,GAAG,CAACR,QAAQ,EAAE,sBAAsB,CAAC;IAC7CP,YAAY,CAACgB,OAAO,GAAG,CAAC,GAAGhB,YAAY,CAACgB,OAAO,EAAET,QAAQ,CAAC;IAC1DO,OAAO,CAACC,GAAG,CAACf,YAAY,CAACgB,OAAO,CAAC;EACnC,CAAC,CAAC;;EAEF;EACAnB,MAAM,CAACY,EAAE,CAAC,gBAAgB,EAAGF,QAAQ,IAAK;IACxCO,OAAO,CAACC,GAAG,CAACR,QAAQ,EAAE,OAAO,CAAC;IAC9BP,YAAY,CAACgB,OAAO,GAAGhB,YAAY,CAACgB,OAAO,CAACC,MAAM,CAChDjB,YAAY,CAACgB,OAAO,CAACE,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAKZ,QAAQ,CAAC,EAC3D,CAAC,CACF;IACDO,OAAO,CAACC,GAAG,CAACf,YAAY,CAACgB,OAAO,CAAC;EACnC,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASI,gBAAgB,GAAG;EACjCvB,MAAM,CAACwB,GAAG,CAAC,SAAS,CAAC;EACrBxB,MAAM,CAACwB,GAAG,CAAC,YAAY,CAAC;EACxBxB,MAAM,CAACwB,GAAG,CAAC,MAAM,CAAC;EAClBxB,MAAM,CAACyB,UAAU,EAAE;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}