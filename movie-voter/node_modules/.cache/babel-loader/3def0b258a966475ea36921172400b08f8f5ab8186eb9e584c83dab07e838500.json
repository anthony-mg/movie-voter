{"ast":null,"code":"import { io } from \"socket.io-client\";\nexport let socket;\nexport function initSocketConnection(state, participants) {\n  socket = io(\"http://localhost:5000\", {\n    autoConnect: false\n  });\n  socket.auth = {\n    nickname: state.nickname,\n    roomID: state.roomID\n  };\n  socket.connect();\n  console.log(\"LINE 11\", ...participants.current);\n  participants.current = [];\n  //New user joined the room. Add to participants.\n  socket.on(\"newUser\", nickname => {\n    console.log(nickname, \"has joined the room.\");\n    participants.current = [...participants.current, nickname];\n    console.log(participants.current);\n  });\n\n  //User left. Remove from participants\n  socket.on(\"userDisconnect\", nickname => {\n    console.log(nickname, \"left.\");\n    participants.current = participants.current.filter(name => name !== nickname);\n    console.log(participants.current);\n  });\n}\n\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\nexport function disconnectSocket() {\n  socket.off(\"connect\");\n  socket.off(\"disconnect\");\n  socket.off(\"pong\");\n  socket.disconnect();\n}","map":{"version":3,"names":["io","socket","initSocketConnection","state","participants","autoConnect","auth","nickname","roomID","connect","console","log","current","on","filter","name","disconnectSocket","off","disconnect"],"sources":["C:/Users/antho/Documents/Programming/WebDev/Movie Voter/movie-voter/src/services/Socket.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport let socket;\r\n\r\nexport function initSocketConnection(state, participants) {\r\n  socket = io(\"http://localhost:5000\", { autoConnect: false });\r\n\r\n  socket.auth = { nickname: state.nickname, roomID: state.roomID };\r\n  socket.connect();\r\n\r\n  console.log(\"LINE 11\", ...participants.current);\r\n\r\n  participants.current = [];\r\n  //New user joined the room. Add to participants.\r\n  socket.on(\"newUser\", (nickname) => {\r\n    console.log(nickname, \"has joined the room.\");\r\n    participants.current = [...participants.current, nickname];\r\n    console.log(participants.current);\r\n  });\r\n\r\n  //User left. Remove from participants\r\n  socket.on(\"userDisconnect\", (nickname) => {\r\n    console.log(nickname, \"left.\");\r\n    participants.current = participants.current.filter((name) => name !== nickname);\r\n    console.log(participants.current);\r\n  });\r\n}\r\n\r\n//useEffect cleanup function. Ensures only one connection is made even after re-renders\r\nexport function disconnectSocket() {\r\n  socket.off(\"connect\");\r\n  socket.off(\"disconnect\");\r\n  socket.off(\"pong\");\r\n  socket.disconnect();\r\n}\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,OAAO,IAAIC,MAAM;AAEjB,OAAO,SAASC,oBAAoB,CAACC,KAAK,EAAEC,YAAY,EAAE;EACxDH,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;IAAEK,WAAW,EAAE;EAAM,CAAC,CAAC;EAE5DJ,MAAM,CAACK,IAAI,GAAG;IAAEC,QAAQ,EAAEJ,KAAK,CAACI,QAAQ;IAAEC,MAAM,EAAEL,KAAK,CAACK;EAAO,CAAC;EAChEP,MAAM,CAACQ,OAAO,EAAE;EAEhBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,GAAGP,YAAY,CAACQ,OAAO,CAAC;EAE/CR,YAAY,CAACQ,OAAO,GAAG,EAAE;EACzB;EACAX,MAAM,CAACY,EAAE,CAAC,SAAS,EAAGN,QAAQ,IAAK;IACjCG,OAAO,CAACC,GAAG,CAACJ,QAAQ,EAAE,sBAAsB,CAAC;IAC7CH,YAAY,CAACQ,OAAO,GAAG,CAAC,GAAGR,YAAY,CAACQ,OAAO,EAAEL,QAAQ,CAAC;IAC1DG,OAAO,CAACC,GAAG,CAACP,YAAY,CAACQ,OAAO,CAAC;EACnC,CAAC,CAAC;;EAEF;EACAX,MAAM,CAACY,EAAE,CAAC,gBAAgB,EAAGN,QAAQ,IAAK;IACxCG,OAAO,CAACC,GAAG,CAACJ,QAAQ,EAAE,OAAO,CAAC;IAC9BH,YAAY,CAACQ,OAAO,GAAGR,YAAY,CAACQ,OAAO,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKR,QAAQ,CAAC;IAC/EG,OAAO,CAACC,GAAG,CAACP,YAAY,CAACQ,OAAO,CAAC;EACnC,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASI,gBAAgB,GAAG;EACjCf,MAAM,CAACgB,GAAG,CAAC,SAAS,CAAC;EACrBhB,MAAM,CAACgB,GAAG,CAAC,YAAY,CAAC;EACxBhB,MAAM,CAACgB,GAAG,CAAC,MAAM,CAAC;EAClBhB,MAAM,CAACiB,UAAU,EAAE;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}